const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const app = express();

// middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// cek env lebih awal (supaya jelas saat deploy)
const { SUPABASE_URL, SUPABASE_SERVICE_ROLE } = process.env;
if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {
  // jangan throw di import time; tetap izinkan /api/health
  console.warn('[WARN] SUPABASE_URL / SUPABASE_SERVICE_ROLE belum di-set. CRUD akan gagal.');
}

// init supabase client (server-side)
const supabase = SUPABASE_URL && SUPABASE_SERVICE_ROLE
  ? createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE, {
      auth: { persistSession: false, autoRefreshToken: false }
    })
  : null;

// health check
app.get('/api/health', (req, res) => {
  res.json({
    ok: true,
    service: 'sepatu-api',
    supabaseConfigured: Boolean(SUPABASE_URL && SUPABASE_SERVICE_ROLE),
    time: new Date().toISOString()
  });
});

// util: guard supabase
function requireSupabase(res) {
  if (!supabase) {
    res.status(500).json({
      error: 'Server belum dikonfigurasi dengan SUPABASE_URL & SUPABASE_SERVICE_ROLE'
    });
    return false;
  }
  return true;
}

// GET /api/items?status=Selesai
app.get('/api/items', async (req, res) => {
  if (!requireSupabase(res)) return;
  try {
    const { status } = req.query;
    let query = supabase.from('items').select('*').order('created_at', { ascending: false });
    if (status) query = query.eq('status', status);

    const { data, error } = await query;
    if (error) return res.status(400).json({ error: error.message });
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// GET /api/items/:id
app.get('/api/items/:id', async (req, res) => {
  if (!requireSupabase(res)) return;
  try {
    const { id } = req.params;
    const { data, error } = await supabase.from('items').select('*').eq('id', id).single();
    if (error) return res.status(404).json({ error: 'Item not found' });
    res.json(data);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// POST /api/items
app.post('/api/items', async (req, res) => {
  if (!requireSupabase(res)) return;
  try {
    const {
      customer_name,
      shoe_brand,
      shoe_color,
      service_type,
      status = 'Menunggu',
      check_in,  // ISO string (opsional)
      due_date,  // ISO string (opsional)
      notes
    } = req.body;

    if (!customer_name || !shoe_brand || !service_type) {
      return res.status(400).json({
        error: 'customer_name, shoe_brand, service_type wajib'
      });
    }

    const allowed = ['Menunggu', 'Proses', 'Selesai', 'Batal'];
    if (status && !allowed.includes(status)) {
      return res.status(400).json({
        error: `status harus salah satu dari: ${allowed.join(', ')}`
      });
    }

    const payload = {
      customer_name, shoe_brand, shoe_color, service_type, status, notes
    };
    if (check_in) payload.check_in = check_in;
    if (due_date) payload.due_date = due_date;

    const { data, error } = await supabase
      .from('items')
      .insert(payload)
      .select()
      .single();

    if (error) return res.status(400).json({ error: error.message });
    res.status(201).json(data);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// PUT /api/items/:id
app.put('/api/items/:id', async (req, res) => {
  if (!requireSupabase(res)) return;
  try {
    const { id } = req.params;
    const update = { ...req.body, updated_at: new Date().toISOString() };
    const allowed = ['Menunggu', 'Proses', 'Selesai', 'Batal'];

    if (update.status && !allowed.includes(update.status)) {
      return res.status(400).json({
        error: `status harus salah satu dari: ${allowed.join(', ')}`
      });
    }

    const { data, error } = await supabase
      .from('items')
      .update(update)
      .eq('id', id)
      .select()
      .single();

    if (error) return res.status(400).json({ error: error.message });

    res.json({
      message: 'Item diperbarui',
      data
    });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// DELETE /api/items/:id
app.delete('/api/items/:id', async (req, res) => {
  if (!requireSupabase(res)) return;
  try {
    const { id } = req.params;
    const { error } = await supabase.from('items').delete().eq('id', id);
    if (error) return res.status(400).json({ error: error.message });
    res.json({ message: 'Item dihapus' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

// 404 fallback (untuk path yang tidak dikenali)
app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

module.exports = app;
